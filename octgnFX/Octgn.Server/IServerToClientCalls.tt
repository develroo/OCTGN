<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ output extension="generated.cs" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"Protocol.xml"));
#>
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
/*
 * This file was automatically generated.
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using Microsoft.AspNet.SignalR;

namespace Octgn.Server
{
	public interface IServerToClientCalls
	{
<#
  foreach (var msg in doc.Root.Elements("msg").Where(m => (bool?)m.Attribute("client") == true))
    WriteLine("\t\tvoid {0}({1});", msg.Attribute("name").Value, BuildParameters(msg, true));
#>
	}
}
<#+
  private string BuildParameters(XElement msg, bool includeTypes)
  {
    var sb = new StringBuilder();
    sb.Append("Guid sender, ");
    foreach (var p in msg.Elements("param").Where(m => (bool?)m.Attribute("server") ?? true == true)) {
        if(includeTypes) {
            sb.Append(ConvertParameterType(p.Attribute("type").Value))
                .Append(" ");
        }
        sb.Append(p.Attribute("name").Value)
        .Append(", ");
    }
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private string ConvertParameterType(string type)
  {
    switch (type)
    {
      case "Player":
	  case "PlayerOrSpectator":
      case "ControllableObject":
      case "Group":
      case "Card":
      case "Counter":
        return "Guid";
      case "Player[]":
      case "Group[]":
        return "Guid[]";
      case "Color?":
        return "string";
      default:
        return type;
    }
  }
#>