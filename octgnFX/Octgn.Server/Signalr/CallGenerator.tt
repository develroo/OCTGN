<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#@ include file="T4Toolbox.tt" #>
<#
    FillGameHub();
    FillHubBroadcaster();
    FillHubRpc();
#>
<#+
    private void FillGameHub()
    {
        var hubPath = Host.ResolvePath("GameHub.cs");
        var hubString = File.ReadAllText(hubPath);

        var sb = new StringBuilder();
        var doc = XDocument.Load(Host.ResolvePath(@"..\Protocol.xml"));
        foreach (var msg in doc.Root.Elements("msg").Where(m => ((bool?)m.Attribute("client") ?? false) != true)){
            var str = string.Format(@"        public void {0}({1})
        {{
            using (var context = new RequestContext(_gameRepo, _settings, _broadcaster)) {{
                context.Initialize(Context, this.Clients.Caller).Wait();
                if (!_handler.InitializeRequest(context)) return;
                _handler.{0}({2});
            }}
        }}
", msg.Attribute("name").Value, BuildParameters(msg, true, false), BuildParameters(msg, false, false));
            sb.AppendLine(str);
        }

        string newString = "";
        int startSpot = hubString.IndexOf("#region IRemoteCalls");
        int endSpot = hubString.IndexOf("#endregion IRemoteCalls");
        string startString = hubString.Substring(0,startSpot + 22) + Environment.NewLine;
        string endString = "		" + hubString.Substring(endSpot, hubString.Length - endSpot);

        string finalString= startString + sb.ToString() + endString;

        WriteLine($"Outputting GameHub.cs info");
        Write(sb.ToString());

        File.WriteAllText(hubPath,finalString);
    }
    private void FillHubBroadcaster()
    {
        var hubBroadcasterPath = Host.ResolvePath("HubBroadcaster.cs");
        var hubBroadcasterString = File.ReadAllText(hubBroadcasterPath);

        var sb = new StringBuilder();
        var doc = XDocument.Load(Host.ResolvePath(@"..\Protocol.xml"));
        foreach (var msg in doc.Root.Elements("msg").Where(m => ((bool?)m.Attribute("client") ?? false) == true)){
            var str = string.Format(@"        public void {0}({1})
        {{
            _hub.Clients.All.{0}({2});
        }}
", msg.Attribute("name").Value, BuildParameters(msg, true, false), BuildParameters(msg, false, false));
            sb.AppendLine(str);
        }

        string newString = "";
        int startSpot = hubBroadcasterString.IndexOf("#region IClientCalls");
        int endSpot = hubBroadcasterString.IndexOf("#endregion IClientCalls");
        string startString = hubBroadcasterString.Substring(0,startSpot + 22) + Environment.NewLine;
        string endString = "		" + hubBroadcasterString.Substring(endSpot, hubBroadcasterString.Length - endSpot);

        string finalString= startString + sb.ToString() + endString;

        WriteLine($"Outputting HubBroadcaster.cs info");
        Write(sb.ToString());

        File.WriteAllText(hubBroadcasterPath,finalString);
    }
    private void FillHubRpc()
    {
        var hubRpcPath = Host.ResolvePath("HubRpc.cs");
        var hubRpcString = File.ReadAllText(hubRpcPath);

        var sb = new StringBuilder();
        var doc = XDocument.Load(Host.ResolvePath(@"..\Protocol.xml"));
        foreach (var msg in doc.Root.Elements("msg").Where(m => ((bool?)m.Attribute("client") ?? false) == true)){
            var str = string.Format(@"        public void {0}({1})
        {{
            _rpc.{0}({2});
        }}
", msg.Attribute("name").Value, BuildParameters(msg, true, false), BuildParameters(msg, false, false));
            sb.AppendLine(str);
        }

        string newString = "";
        int startSpot = hubRpcString.IndexOf("#region IClientCalls");
        int endSpot = hubRpcString.IndexOf("#endregion IClientCalls");
        string startString = hubRpcString.Substring(0,startSpot + 22) + Environment.NewLine;
        string endString = "		" + hubRpcString.Substring(endSpot, hubRpcString.Length - endSpot);

        string finalString= startString + sb.ToString() + endString;

        WriteLine($"Outputting HubRpc.cs info");
        Write(sb.ToString());

        File.WriteAllText(hubRpcPath, finalString);
    }
	private string BuildParameters(XElement msg, bool withType, bool client)
	{
		var sb = new StringBuilder();
		foreach (var p in msg.Elements("param").Where(m => ((bool?)m.Attribute(client ? "client" : "server") ?? true) == true))
        {
            if(withType)
                sb.Append(ConvertParameterType(p.Attribute("type").Value)).Append(" ");
            sb.Append(p.Attribute("name").Value)
              .Append(", ");
        }
		if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
		return sb.ToString();
	}

	private string ConvertParameterType(string type)
	{
		switch (type)
		{
			case "Player":
			case "PlayerOrSpectator":
				return "uint";
			case "ControllableObject":
			case "Group":
			case "Card":
			case "Counter":
				return "ulong";
			case "Player[]":
				return "uint[]";
			case "Group[]":
				return "ulong[]";
			case "Color?":
				return "string";
			default:
				return type;
		}
	}
#>
