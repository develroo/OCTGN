<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"..\..\Octgn.Server\Protocol.xml"));
#>
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
/*
 * This file was automatically generated.
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.Windows.Media;
using Octgn.Play;
using log4net;
using Microsoft.AspNet.SignalR.Client;

namespace Octgn.Networking
{
	public class HubRpc : IServerCalls
	{
		internal static ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        private IHubProxy _hub;

        internal void InitializeHub(IHubProxy hub) {
            var oldHub = System.Threading.Interlocked.Exchange(ref _hub, hub);
            if (oldHub != null) {
                // TODO unregister all event handlers
            }
        }
<#
  int msgId = -1;
  foreach (var msg in doc.Root.Elements("msg"))
  {
    msgId++;
    if ((bool?)msg.Attribute("server") != true) continue;
    string msgName = msg.Attribute("name").Value;
        var msgParams = msg.Elements("param").Where(m => ((bool?)m.Attribute("client") ?? true) == true).ToArray();
#>

        public void <#= msgName #>(<#= ParametersList(msg) #>)
        {
<# if(msgName != "Ping"){ #>
            //Log.Debug("[ProtOut] <#= msgName #>");
<# } #>
            if(Program.Client == null)return;

<# if(msgParams.Length > 0){ #>
            var invokeArgs = new object[]{
                <#= string.Join("," + Environment.NewLine + "                ", msgParams.Select(x=>x.Attribute("name").Value)) #>
            };
            _hub.Invoke(nameof(<#=msgName#>), invokeArgs);
<# } else { #>
            _hub.Invoke(nameof(<#=msgName#>));
<# } #>
		}
<# } #>
	}
}
<#+
  private string ParametersList(XElement msg)
  {
    var sb = new StringBuilder();
    foreach (var p in msg.Elements("param").Where(m => ((bool?)m.Attribute("client") ?? true) == true))
        {
            var ptype= p.Attribute("type").Value;
			if(ptype == "PlayerOrSpectator")
                ptype = "Player";
            sb.Append(ptype)
                .Append(" ")
                .Append(p.Attribute("name").Value)
                .Append(", ");
        }
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

  private Dictionary<string, string> paramsOutput = new Dictionary<string, string>()
  {
    { "Version", "writer.Write({0}.ToString());" },
    { "Guid", "writer.Write({0}.ToByteArray());" },

    { "Guid[]", @"writer.Write((short){0}.Length);
foreach (Guid g in {0})
	writer.Write(g.ToByteArray());" },
    { "string[]", @"writer.Write((short){0}.Length);
foreach (string s in {0})
	writer.Write(s);" },
    { "CardOrientation", "writer.Write((byte){0});" },

    { "short[]", @"writer.Write((short){0}.Length);
foreach (short p in {0})
	writer.Write(p);" },

    { "int[]", @"writer.Write((short){0}.Length);
foreach (int p in {0})
	writer.Write(p);" },

    { "bool[]", @"writer.Write((short){0}.Length);
foreach (bool p in {0})
	writer.Write(p);" },

    { "ulong[]", @"writer.Write((short){0}.Length);
			foreach (ulong p in {0})
				writer.Write(p);" },

    { "Player", "{0}.Id;" },
    { "PlayerOrSpectator", "writer.Write({0}.Id);" },
    { "ControllableObject", "writer.Write({0}.Id);" },
    { "Group", "writer.Write({0}.Id);" },
    { "Card", "writer.Write({0}.Id);" },
    { "Counter", "writer.Write({0}.Id);" },
    { "Color?", "writer.Write({0} == null ? \"\" : {0}.ToString());" },

    { "Player[]", @"writer.Write((short){0}.Length);
foreach (Player p in {0})
	writer.Write(p.Id);" },

    { "Group[]", @"writer.Write((short){0}.Length);
foreach (Group p in {0})
	writer.Write(p.Id);" },
  };
#>