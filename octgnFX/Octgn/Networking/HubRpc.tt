<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
  XDocument doc = XDocument.Load(Host.ResolvePath(@"..\..\Octgn.Server\Protocol.xml"));
#>
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
/*
 * This file was automatically generated.
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Media;
using Octgn.Play;
using log4net;
using Microsoft.AspNet.SignalR.Client;

namespace Octgn.Networking
{
	public class HubRpc : IRpc
	{
		internal static ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        private IHubProxy _hub;

        internal void InitializeHub(IHubProxy hub) {
            var oldHub = System.Threading.Interlocked.Exchange(ref _hub, hub);
            if (oldHub != null) {
                // TODO unregister all event handlers
            }
        }
<#
  int msgId = -1;
  foreach (var msg in doc.Root.Elements("msg"))
  {
    msgId++;
    if ((bool?)msg.Attribute("server") != true) continue;
    string msgName = msg.Attribute("name").Value;
        var msgParams = msg.Elements("param").Where(m => ((bool?)m.Attribute("client") ?? true) == true).ToArray();
#>

        public async Task <#= msgName #>(<#= ParametersList(msg) #>)
        {
            if(Program.Client == null)return;

<# if(msgParams.Length > 0){ #>
            var invokeArgs = new object[]{
                <#= string.Join("," + Environment.NewLine + "                ", msgParams.Select(x=>ConvertParamToSendable(x.Attribute("name").Value, x.Attribute("type").Value))) #>
            };
            await _hub.Invoke(nameof(<#=msgName#>), invokeArgs);
<# } else { #>
            await _hub.Invoke(nameof(<#=msgName#>));
<# } #>
		}
<# } #>
	}
}
<#+
  private string ParametersList(XElement msg)
  {
    var sb = new StringBuilder();
    foreach (var p in msg.Elements("param").Where(m => ((bool?)m.Attribute("client") ?? true) == true))
        {
            var ptype= p.Attribute("type").Value;
			if(ptype == "PlayerOrSpectator")
                ptype = "Player";
            sb.Append(ptype)
                .Append(" ")
                .Append(p.Attribute("name").Value)
                .Append(", ");
        }
    if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
    return sb.ToString();
  }

    private string ConvertParamToSendable(string name, string type){
        string val = null;
        if(!paramsOutput.TryGetValue(type, out val)) return name;
        return string.Format(val, name);
    }

  private Dictionary<string, string> paramsOutput = new Dictionary<string, string>()
  {
    { "ulong[]", "{0}.Select(u=>(long)u).ToArray()" },
    { "Player", "{0}.Id" },
    { "PlayerOrSpectator", "{0}.Id" },
    { "ControllableObject", "(long){0}.Id" },
    { "Group", "(long){0}.Id" },
    { "Card", "(long){0}.Id" },
    { "Counter", "(long){0}.Id" },

    { "Player[]", @"{0}.Select(player=>player.Id).ToArray()" },
    { "Group[]", @"{0}.Select(grp=>(long)grp.Id).ToArray()" },
  };
#>