<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
    XDocument doc = XDocument.Load(Host.ResolvePath(@"..\..\Octgn.Server\Protocol.xml"));
#>
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
/*
 * This file was automatically generated.
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.Threading.Tasks;
using System.Windows.Media;
using Octgn.Play;

namespace Octgn.Networking
{
	interface IRpc
	{
<#
    foreach (var msg in doc.Root.Elements("msg").Where(m => (bool?)m.Attribute("server") == true))
        WriteLine("\t\tTask {0}({1});", msg.Attribute("name").Value, BuildParameters(msg));
#>
	}
}
<#+
    private string BuildParameters(XElement msg)
    {
        var sb = new StringBuilder();
        foreach (var p in msg.Elements("param").Where(m => ((bool?)m.Attribute("client") ?? true) == true))
        {
            var ptype = p.Attribute("type").Value;
            if(ptype == "PlayerOrSpectator")
                ptype = "Player";
            sb.Append(ptype)
                .Append(" ")
                .Append(p.Attribute("name").Value)
                .Append(", ");
        }
        if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
        return sb.ToString();
    }
#>